From 58d12501b11b2d6cae387fd1c64e44f5a3ca3274 Mon Sep 17 00:00:00 2001
From: Mattias <mattias@zvea.co>
Date: Mon, 29 Oct 2018 19:03:36 +0100
Subject: [PATCH] Constant shit missing

---
 .../bluetooth/BluetoothCodecConfig.java       | 158 ++++++++----------
 1 file changed, 68 insertions(+), 90 deletions(-)

diff --git a/core/java/android/bluetooth/BluetoothCodecConfig.java b/core/java/android/bluetooth/BluetoothCodecConfig.java
index e3a6e064725..8fdabac64ba 100644
--- a/core/java/android/bluetooth/BluetoothCodecConfig.java
+++ b/core/java/android/bluetooth/BluetoothCodecConfig.java
@@ -31,7 +31,7 @@
 public final class BluetoothCodecConfig implements Parcelable {
     // Add an entry for each source codec here.
     // NOTE: The values should be same as those listed in the following file:
-    //   hardware/libhardware/include/hardware/bt_av.h
+    // hardware/libhardware/include/hardware/bt_av.h
     public static final int SOURCE_CODEC_TYPE_SBC = 0;
     public static final int SOURCE_CODEC_TYPE_AAC = 1;
     public static final int SOURCE_CODEC_TYPE_APTX = 2;
@@ -61,6 +61,7 @@
     public static final int CHANNEL_MODE_NONE = 0;
     public static final int CHANNEL_MODE_MONO = 0x1 << 0;
     public static final int CHANNEL_MODE_STEREO = 0x1 << 1;
+    public static final int CHANNEL_MODE_DUAL_CHANNEL = 0x1 << 2;
 
     private final int mCodecType;
     private int mCodecPriority;
@@ -72,11 +73,8 @@
     private final long mCodecSpecific3;
     private final long mCodecSpecific4;
 
-    public BluetoothCodecConfig(int codecType, int codecPriority,
-            int sampleRate, int bitsPerSample,
-            int channelMode, long codecSpecific1,
-            long codecSpecific2, long codecSpecific3,
-            long codecSpecific4) {
+    public BluetoothCodecConfig(int codecType, int codecPriority, int sampleRate, int bitsPerSample, int channelMode,
+            long codecSpecific1, long codecSpecific2, long codecSpecific3, long codecSpecific4) {
         mCodecType = codecType;
         mCodecPriority = codecPriority;
         mSampleRate = sampleRate;
@@ -92,14 +90,10 @@ public BluetoothCodecConfig(int codecType, int codecPriority,
     public boolean equals(Object o) {
         if (o instanceof BluetoothCodecConfig) {
             BluetoothCodecConfig other = (BluetoothCodecConfig) o;
-            return (other.mCodecType == mCodecType
-                    && other.mCodecPriority == mCodecPriority
-                    && other.mSampleRate == mSampleRate
-                    && other.mBitsPerSample == mBitsPerSample
-                    && other.mChannelMode == mChannelMode
-                    && other.mCodecSpecific1 == mCodecSpecific1
-                    && other.mCodecSpecific2 == mCodecSpecific2
-                    && other.mCodecSpecific3 == mCodecSpecific3
+            return (other.mCodecType == mCodecType && other.mCodecPriority == mCodecPriority
+                    && other.mSampleRate == mSampleRate && other.mBitsPerSample == mBitsPerSample
+                    && other.mChannelMode == mChannelMode && other.mCodecSpecific1 == mCodecSpecific1
+                    && other.mCodecSpecific2 == mCodecSpecific2 && other.mCodecSpecific3 == mCodecSpecific3
                     && other.mCodecSpecific4 == mCodecSpecific4);
         }
         return false;
@@ -107,31 +101,30 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(mCodecType, mCodecPriority, mSampleRate,
-                mBitsPerSample, mChannelMode, mCodecSpecific1,
+        return Objects.hash(mCodecType, mCodecPriority, mSampleRate, mBitsPerSample, mChannelMode, mCodecSpecific1,
                 mCodecSpecific2, mCodecSpecific3, mCodecSpecific4);
     }
 
     /**
      * Checks whether the object contains valid codec configuration.
      *
-     * @return true if the object contains valid codec configuration, otherwise false.
+     * @return true if the object contains valid codec configuration, otherwise
+     *         false.
      */
     public boolean isValid() {
-        return (mSampleRate != SAMPLE_RATE_NONE)
-                && (mBitsPerSample != BITS_PER_SAMPLE_NONE)
+        return (mSampleRate != SAMPLE_RATE_NONE) && (mBitsPerSample != BITS_PER_SAMPLE_NONE)
                 && (mChannelMode != CHANNEL_MODE_NONE);
     }
 
     /**
      * Adds capability string to an existing string.
      *
-     * @param prevStr the previous string with the capabilities. Can be a null pointer.
-     * @param capStr the capability string to append to prevStr argument.
+     * @param prevStr the previous string with the capabilities. Can be a null
+     *                pointer.
+     * @param capStr  the capability string to append to prevStr argument.
      * @return the result string in the form "prevStr|capStr".
      */
-    private static String appendCapabilityToString(String prevStr,
-            String capStr) {
+    private static String appendCapabilityToString(String prevStr, String capStr) {
         if (prevStr == null) {
             return capStr;
         }
@@ -188,18 +181,11 @@ public String toString() {
             channelModeStr = appendCapabilityToString(channelModeStr, "STEREO");
         }
 
-        return "{codecName:" + getCodecName()
-                + ",mCodecType:" + mCodecType
-                + ",mCodecPriority:" + mCodecPriority
-                + ",mSampleRate:" + String.format("0x%x", mSampleRate)
-                + "(" + sampleRateStr + ")"
-                + ",mBitsPerSample:" + String.format("0x%x", mBitsPerSample)
-                + "(" + bitsPerSampleStr + ")"
-                + ",mChannelMode:" + String.format("0x%x", mChannelMode)
-                + "(" + channelModeStr + ")"
-                + ",mCodecSpecific1:" + mCodecSpecific1
-                + ",mCodecSpecific2:" + mCodecSpecific2
-                + ",mCodecSpecific3:" + mCodecSpecific3
+        return "{codecName:" + getCodecName() + ",mCodecType:" + mCodecType + ",mCodecPriority:" + mCodecPriority
+                + ",mSampleRate:" + String.format("0x%x", mSampleRate) + "(" + sampleRateStr + ")" + ",mBitsPerSample:"
+                + String.format("0x%x", mBitsPerSample) + "(" + bitsPerSampleStr + ")" + ",mChannelMode:"
+                + String.format("0x%x", mChannelMode) + "(" + channelModeStr + ")" + ",mCodecSpecific1:"
+                + mCodecSpecific1 + ",mCodecSpecific2:" + mCodecSpecific2 + ",mCodecSpecific3:" + mCodecSpecific3
                 + ",mCodecSpecific4:" + mCodecSpecific4 + "}";
     }
 
@@ -208,29 +194,25 @@ public int describeContents() {
         return 0;
     }
 
-    public static final Parcelable.Creator<BluetoothCodecConfig> CREATOR =
-            new Parcelable.Creator<BluetoothCodecConfig>() {
-                public BluetoothCodecConfig createFromParcel(Parcel in) {
-                    final int codecType = in.readInt();
-                    final int codecPriority = in.readInt();
-                    final int sampleRate = in.readInt();
-                    final int bitsPerSample = in.readInt();
-                    final int channelMode = in.readInt();
-                    final long codecSpecific1 = in.readLong();
-                    final long codecSpecific2 = in.readLong();
-                    final long codecSpecific3 = in.readLong();
-                    final long codecSpecific4 = in.readLong();
-                    return new BluetoothCodecConfig(codecType, codecPriority,
-                            sampleRate, bitsPerSample,
-                            channelMode, codecSpecific1,
-                            codecSpecific2, codecSpecific3,
-                            codecSpecific4);
-                }
-
-                public BluetoothCodecConfig[] newArray(int size) {
-                    return new BluetoothCodecConfig[size];
-                }
-            };
+    public static final Parcelable.Creator<BluetoothCodecConfig> CREATOR = new Parcelable.Creator<BluetoothCodecConfig>() {
+        public BluetoothCodecConfig createFromParcel(Parcel in) {
+            final int codecType = in.readInt();
+            final int codecPriority = in.readInt();
+            final int sampleRate = in.readInt();
+            final int bitsPerSample = in.readInt();
+            final int channelMode = in.readInt();
+            final long codecSpecific1 = in.readLong();
+            final long codecSpecific2 = in.readLong();
+            final long codecSpecific3 = in.readLong();
+            final long codecSpecific4 = in.readLong();
+            return new BluetoothCodecConfig(codecType, codecPriority, sampleRate, bitsPerSample, channelMode,
+                    codecSpecific1, codecSpecific2, codecSpecific3, codecSpecific4);
+        }
+
+        public BluetoothCodecConfig[] newArray(int size) {
+            return new BluetoothCodecConfig[size];
+        }
+    };
 
     @Override
     public void writeToParcel(Parcel out, int flags) {
@@ -252,27 +234,27 @@ public void writeToParcel(Parcel out, int flags) {
      */
     public String getCodecName() {
         switch (mCodecType) {
-            case SOURCE_CODEC_TYPE_SBC:
-                return "SBC";
-            case SOURCE_CODEC_TYPE_AAC:
-                return "AAC";
-            case SOURCE_CODEC_TYPE_APTX:
-                return "aptX";
-            case SOURCE_CODEC_TYPE_APTX_HD:
-                return "aptX HD";
-            case SOURCE_CODEC_TYPE_LDAC:
-                return "LDAC";
-            case SOURCE_CODEC_TYPE_INVALID:
-                return "INVALID CODEC";
-            default:
-                break;
+        case SOURCE_CODEC_TYPE_SBC:
+            return "SBC";
+        case SOURCE_CODEC_TYPE_AAC:
+            return "AAC";
+        case SOURCE_CODEC_TYPE_APTX:
+            return "aptX";
+        case SOURCE_CODEC_TYPE_APTX_HD:
+            return "aptX HD";
+        case SOURCE_CODEC_TYPE_LDAC:
+            return "LDAC";
+        case SOURCE_CODEC_TYPE_INVALID:
+            return "INVALID CODEC";
+        default:
+            break;
         }
         return "UNKNOWN CODEC(" + mCodecType + ")";
     }
 
     /**
-     * Gets the codec type.
-     * See {@link android.bluetooth.BluetoothCodecConfig#SOURCE_CODEC_TYPE_SBC}.
+     * Gets the codec type. See
+     * {@link android.bluetooth.BluetoothCodecConfig#SOURCE_CODEC_TYPE_SBC}.
      *
      * @return the codec type
      */
@@ -290,9 +272,8 @@ public boolean isMandatoryCodec() {
     }
 
     /**
-     * Gets the codec selection priority.
-     * The codec selection priority is relative to other codecs: larger value
-     * means higher priority. If 0, reset to default.
+     * Gets the codec selection priority. The codec selection priority is relative
+     * to other codecs: larger value means higher priority. If 0, reset to default.
      *
      * @return the codec priority
      */
@@ -301,9 +282,8 @@ public int getCodecPriority() {
     }
 
     /**
-     * Sets the codec selection priority.
-     * The codec selection priority is relative to other codecs: larger value
-     * means higher priority. If 0, reset to default.
+     * Sets the codec selection priority. The codec selection priority is relative
+     * to other codecs: larger value means higher priority. If 0, reset to default.
      *
      * @param codecPriority the codec priority
      */
@@ -312,10 +292,9 @@ public void setCodecPriority(int codecPriority) {
     }
 
     /**
-     * Gets the codec sample rate. The value can be a bitmask with all
-     * supported sample rates:
-     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_NONE} or
-     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_44100} or
+     * Gets the codec sample rate. The value can be a bitmask with all supported
+     * sample rates: {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_NONE}
+     * or {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_44100} or
      * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_48000} or
      * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_88200} or
      * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_96000} or
@@ -329,8 +308,8 @@ public int getSampleRate() {
     }
 
     /**
-     * Gets the codec bits per sample. The value can be a bitmask with all
-     * bits per sample supported:
+     * Gets the codec bits per sample. The value can be a bitmask with all bits per
+     * sample supported:
      * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_NONE} or
      * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_16} or
      * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_24} or
@@ -343,8 +322,8 @@ public int getBitsPerSample() {
     }
 
     /**
-     * Gets the codec channel mode. The value can be a bitmask with all
-     * supported channel modes:
+     * Gets the codec channel mode. The value can be a bitmask with all supported
+     * channel modes:
      * {@link android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_NONE} or
      * {@link android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_MONO} or
      * {@link android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_STEREO}
@@ -398,8 +377,7 @@ public long getCodecSpecific4() {
      * @return true if the audio feeding parameters are same, otherwise false
      */
     public boolean sameAudioFeedingParameters(BluetoothCodecConfig other) {
-        return (other != null && other.mSampleRate == mSampleRate
-                && other.mBitsPerSample == mBitsPerSample
+        return (other != null && other.mSampleRate == mSampleRate && other.mBitsPerSample == mBitsPerSample
                 && other.mChannelMode == mChannelMode);
     }
 }
